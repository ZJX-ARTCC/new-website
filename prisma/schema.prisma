generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Action {
  id     String @id @default(uuid())
  user   Int
  action String
  roster Roster @relation(fields: [user], references: [cid], onDelete: Cascade)

  @@map("action_log")
}

model ArtccStats {
  id        Int      @id
  timestamp DateTime
  mtd       Float?
  ytd       Float?
  all_time  Float?

  @@map("artcc_stats")
}

model ControllerSession {
  id        String    @id @default(uuid())
  cid       Int
  callsign  String?   @db.VarChar(255)
  frequency String?   @db.VarChar(255)
  start     DateTime? @db.Timestamptz(6)
  active    Boolean
  end       DateTime? @db.Timestamptz(6)
  duration  Int?      @default(0)
  roster    Roster    @relation(fields: [cid], references: [cid], onDelete: Cascade)

  @@map("controller_sessions")
}

model Event {
  id               Int               @id @default(autoincrement())
  lastModified     DateTime          @default(now()) @map("last_modified") @db.Timestamptz(6)
  createdBy        Int               @map("created_by")
  name             String
  description      String
  start            DateTime          @db.Timestamptz(6)
  end              DateTime          @db.Timestamptz(6)
  host             String
  hidden           Boolean           @default(true)
  banner           String
  EventPosition    EventPosition[]
  roster           Roster            @relation(fields: [createdBy], references: [cid], onDelete: NoAction, onUpdate: NoAction)
  positionRequests PositionRequest[]

  @@map("events")
}

model EventPosition {
  controller      Int?
  eventId         Int
  position        String
  type            Float
  id              String            @id @default(uuid())
  event           Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  PositionRequest PositionRequest[]

  @@map("event_positions")
}

model Feedback {
  id            String   @id @default(uuid())
  author        Int
  controller    Int
  position      String
  rating        Int
  comment       String
  public        Boolean  @default(false)
  created       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  authorCid     User     @relation(fields: [author], references: [id], onDelete: Cascade)
  controllerCid Roster   @relation(fields: [controller], references: [cid], onDelete: Cascade)

  @@map("feedback")
}

model File {
  id          String   @id @default(uuid())
  name        String
  description String
  path        String
  type        String
  updated     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("files")
}

model PositionRequest {
  cid           Int
  eventId       Int           @map("event_id")
  position      String
  requestId     Int           @id(map: "request_id") @default(autoincrement()) @map("request_id")
  roster        Roster        @relation(fields: [cid], references: [cid], onDelete: Cascade, map: "cid")
  event         Event         @relation(fields: [eventId], references: [id], onDelete: Cascade, map: "event_id")
  eventPosition EventPosition @relation(fields: [position], references: [id], onDelete: Cascade, map: "position")

  @@map("position_requests")
}

model Roster {
  cid                                                        Int                 @id
  email                                                      String
  homeFacility                                               String              @map("home_facility")
  createdAt                                                  DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  rating                                                     Int
  delCerts                                                   Float               @map("del_certs")
  gndCerts                                                   Float               @map("gnd_certs")
  twrCerts                                                   Float               @map("twr_certs")
  appCerts                                                   Float               @map("app_certs")
  ctrCert                                                    Int                 @map("ctr_cert")
  initials                                                   String
  firstName                                                  String              @map("first_name")
  lastName                                                   String              @map("last_name")
  mentorLevel                                                BigInt?             @default(0) @map("mentor_level")
  ratingChanged                                              DateTime?           @default(now()) @map("rating_changed") @db.Timestamptz(6)
  sopCourse                                                  Boolean             @default(false) @map("sop_course")
  actions                                                    Action[]
  controllerSessions                                         ControllerSession[]
  events                                                     Event[]
  feedback                                                   Feedback[]
  positionRequests                                           PositionRequest[]
  StaffRoles                                                 StaffRole[]
  stats                                                      Stats?
  training_requests_training_requests_instructor_cidToroster TrainingRequest[]   @relation("training_requests_instructor_cidToroster")
  training_requests_training_requests_student_cidToroster    TrainingRequest[]   @relation("training_requests_student_cidToroster")
  training_sessions_training_sessions_student_cidToroster    TrainingSession[]   @relation("training_sessions_student_cidToroster")
  training_sessions_training_sessions_instructor_cidToroster TrainingSession[]   @relation("training_sessions_instructor_cidToroster")

  @@map("roster")
}

model StaffRole {
  cid    Int
  role   String @db.VarChar(10)
  roster Roster @relation(fields: [cid], references: [cid], onDelete: NoAction, onUpdate: NoAction, map: "staff_roles_roster_cid_fk")

  @@id([cid, role], map: "staff_roles_pk")
  @@map("staff_roles")
}

model Stats {
  cid         Int    @id
  ytd         Int?   @default(0)
  all_time    Int?   @default(0)
  delivery    Int?   @default(0)
  ground      Int?   @default(0)
  tower       Int?   @default(0)
  tracon      Int?   @default(0)
  enroute     Int?   @default(0)
  month_one   Int?   @default(0)
  month_two   Int?   @default(0)
  month_three Int?   @default(0)
  roster      Roster @relation(fields: [cid], references: [cid], onDelete: Cascade)

  @@map("stats")
}

model TrainingRequest {
  trainingRequestId                               Int       @id(map: "training_requests_pk") @default(autoincrement()) @map("training_request_id")
  studentCid                                      Int       @map("student_cid")
  instructorCid                                   Int?      @map("instructor_cid")
  dateRequested                                   DateTime  @default(dbgenerated("CURRENT_DATE")) @map("date_requested") @db.Date
  dateAssigned                                    DateTime? @map("date_assigned") @db.Date
  status                                          String?   @db.VarChar(50)
  active                                          Boolean   @default(true)
  trainingType                                    String?   @map("training_type") @db.VarChar(30)
  roster_training_requests_instructor_cidToroster Roster?   @relation("training_requests_instructor_cidToroster", fields: [instructorCid], references: [cid], onUpdate: NoAction, map: "training_requests_roster_cid_fk_ins")
  roster_training_requests_student_cidToroster    Roster    @relation("training_requests_student_cidToroster", fields: [studentCid], references: [cid], onDelete: Cascade, onUpdate: NoAction, map: "training_requests_roster_cid_fk_student")

  @@map("training_requests")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model TrainingSession {
  session_id                                      Int      @id @default(autoincrement())
  student_cid                                     Int
  instructorCid                                   Int      @map("instructor_cid")
  duration                                        Int
  movements                                       Int?     @default(0)
  notes                                           String   @db.VarChar(750)
  score                                           Int
  position                                        String   @db.VarChar(20)
  location                                        Int
  session_date                                    DateTime @db.Date
  roster_training_sessions_student_cidToroster    Roster   @relation("training_sessions_student_cidToroster", fields: [student_cid], references: [cid], onDelete: Cascade, map: "training_sessions___fk_controller")
  roster_training_sessions_instructor_cidToroster Roster   @relation("training_sessions_instructor_cidToroster", fields: [instructorCid], references: [cid], onDelete: NoAction, map: "training_sessions___fk_instructor")

  @@map("training_sessions")
}

model User {
  id                                              Int            @id
  firstName                                       String         @map("first_name")
  lastName                                        String         @map("last_name")
  email                                           String         @unique
  division                                        String
  facility                                        String?
  rating                                          Int
  roles                                           String
  rostered                                        Boolean?
  feedback                                        Feedback[]
  visitRequests                                   VisitRequest[]
  visit_requests_visit_requests_action_cidTousers VisitRequest[] @relation("visit_requests_action_cidTousers")
  sessions                                        WebSession[]

  @@map("users")
}

model VisitRequest {
  id                                     Int       @id @default(autoincrement())
  cid                                    Int
  reason                                 String
  dateRequested                          DateTime? @map("date_requested") @db.Date
  reviewed                               Boolean?  @default(false)
  actionMessage                          String?   @map("action_message") @db.VarChar(150)
  actionCid                              Int?      @map("action_cid")
  actionDate                             DateTime? @map("action_date") @db.Date
  accepted                               Boolean   @default(false)
  users                                  User      @relation(fields: [cid], references: [id], onDelete: Cascade, map: "visit_requests_users_cid_fk")
  users_visit_requests_action_cidTousers User?     @relation("visit_requests_action_cidTousers", fields: [actionCid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "visit_requests_users_id_fk")

  @@map("visit_requests")
}

model WebSession {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("web_sessions")
}