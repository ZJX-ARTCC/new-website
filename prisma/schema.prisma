generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ArtccStats {
  id        Int      @id
  timestamp DateTime
  mtd       Float?
  ytd       Float?
  all_time  Float?

  @@map("artcc_stats")
}

model ControllerSession {
  id        Int       @id
  cid       Int
  callsign  String?   @db.VarChar(255)
  frequency String?   @db.VarChar(255)
  start     DateTime? @db.Timestamptz(6)
  end       Int?
  active    Boolean
  roster    roster    @relation(fields: [cid], references: [cid], onDelete: NoAction, onUpdate: NoAction)

  @@map("controller_sessions")
}

model events {
  id                Int                 @id @default(autoincrement())
  last_modified     DateTime            @default(now()) @db.Timestamptz(6)
  created_by        Int
  name              String
  description       String
  start             DateTime            @db.Timestamptz(6)
  end               DateTime            @db.Timestamptz(6)
  host              String
  hidden            Boolean             @default(true)
  banner            String
  positions         Json?
  roster            roster              @relation(fields: [created_by], references: [cid], onDelete: NoAction, onUpdate: NoAction)
  position_requests position_requests[]
}

model OnlineControllers {
  id          BigInt    @id
  cid         Int?
  callsign    String?   @db.VarChar(255)
  frequency   String?   @db.VarChar(255)
  logon_time  DateTime? @db.Timestamptz(6)
  last_update DateTime? @db.Timestamptz(6)
  duration    Int?
  roster      roster?   @relation(fields: [cid], references: [cid], onDelete: Cascade, map: "cid")

  @@map("online_controllers")
}

model position_requests {
  cid        Int
  event_id   Int
  position   String
  request_id Int    @id(map: "request_id") @default(autoincrement())
  roster     roster @relation(fields: [cid], references: [cid], onDelete: Cascade, map: "cid")
  events     events @relation(fields: [event_id], references: [id], onDelete: Cascade, map: "event_id")
}

model roster {
  cid                Int                 @id
  email              String
  home_facility      String
  created_at         DateTime            @default(now()) @db.Timestamptz(6)
  rating             Int
  del_certs          Int?
  gnd_certs          Int
  twr_certs          Int
  app_certs          Int
  ctr_cert           Int
  initials           String
  first_name         String
  last_name          String
  mentor_level       BigInt?             @default(0)
  rating_changed     DateTime?           @default(now()) @db.Timestamptz(6)
  sop_course         Boolean             @default(false)
  controllerSessions ControllerSession[]
  events             events[]
  onlineControllers  OnlineControllers[]
  position_requests  position_requests[]
  staff_roles        staff_roles[]
  stats              Stats?
}

model Stats {
  cid         Int    @id
  month_one   Float  @default(0.0)
  month_two   Float  @default(0.0)
  month_three Float  @default(0.0)
  ytd         Float?
  all_time    Float?
  delivery    Float?
  ground      Float?
  tower       Float?
  tracon      Float?
  enroute     Float?
  roster      roster @relation(fields: [cid], references: [cid], onDelete: Cascade, onUpdate: NoAction)

  @@map("stats")
}

model User {
  id                                              Int            @id
  firstName                                       String         @map("first_name")
  lastName                                        String         @map("last_name")
  email                                           String         @unique
  division                                        String
  facility                                        String?
  rating                                          Int
  roles                                           String
  rostered                                        Boolean?
  visitRequests                                   VisitRequest[]
  visit_requests_visit_requests_action_cidTousers VisitRequest[] @relation("visit_requests_action_cidTousers")
  sessions                                        WebSession[]

  @@map("users")
}

model VisitRequest {
  id                                     Int       @id @default(autoincrement())
  cid                                    Int
  reason                                 String
  date_requested                         DateTime? @db.Date
  reviewed                               Boolean?  @default(false)
  action_message                         String?   @db.VarChar(150)
  action_cid                             Int?
  action_date                            DateTime? @db.Date
  users                                  User      @relation(fields: [cid], references: [id], onDelete: Cascade, map: "visit_requests_users_cid_fk")
  users_visit_requests_action_cidTousers User?     @relation("visit_requests_action_cidTousers", fields: [action_cid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "visit_requests_users_id_fk")

  @@map("visit_requests")
}

model WebSession {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("web_sessions")
}

model staff_roles {
  cid    Int
  role   String @db.VarChar(10)
  roster roster @relation(fields: [cid], references: [cid], onDelete: NoAction, onUpdate: NoAction, map: "staff_roles_roster_cid_fk")

  @@id([cid, role], map: "staff_roles_pk")
}
