generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ArtccStats {
  id        Int      @id
  timestamp DateTime
  mtd       Float?
  ytd       Float?
  all_time  Float?

  @@map("artcc_stats")
}

model ControllerSession {
  id        Int       @id
  cid       Int
  callsign  String?   @db.VarChar(255)
  frequency String?   @db.VarChar(255)
  start     DateTime? @db.Timestamptz(6)
  end       Int?
  active    Boolean
  roster    Roster    @relation(fields: [cid], references: [cid], onDelete: NoAction, onUpdate: NoAction)

  @@map("controller_sessions")
}

model Event {
  id               Int               @id @default(autoincrement())
  lastModified     DateTime          @default(now()) @map("last_modified") @db.Timestamptz(6)
  createdBy        Int               @map("created_by")
  name             String
  description      String
  start            DateTime          @db.Timestamptz(6)
  end              DateTime          @db.Timestamptz(6)
  host             String
  hidden           Boolean           @default(true)
  banner           String
  positions        Json?
  roster           Roster            @relation(fields: [createdBy], references: [cid], onDelete: NoAction, onUpdate: NoAction)
  positionRequests PositionRequest[]

  @@map("events")
}

model OnlineControllers {
  id          BigInt    @id
  cid         Int?
  callsign    String?   @db.VarChar(255)
  frequency   String?   @db.VarChar(255)
  logon_time  DateTime? @db.Timestamptz(6)
  last_update DateTime? @db.Timestamptz(6)
  duration    Int?
  roster      Roster?   @relation(fields: [cid], references: [cid], onDelete: Cascade, map: "cid")

  @@map("online_controllers")
}


model PositionRequest {
  cid       Int
  eventId   Int    @map("event_id")
  position  String
  requestId Int    @id(map: "request_id") @default(autoincrement()) @map("request_id")
  roster    Roster @relation(fields: [cid], references: [cid], onDelete: Cascade, map: "cid")
  event     Event  @relation(fields: [eventId], references: [id], onDelete: Cascade, map: "event_id")

  @@map("position_requests")
}

model Roster {
  cid                Int                 @id
  email              String
  home_facility      String
  created_at         DateTime            @default(now()) @db.Timestamptz(6)
  rating             Int
  del_certs          Int?
  gnd_certs          Int
  twr_certs          Int
  app_certs          Int
  ctr_cert           Int
  initials           String
  first_name         String
  last_name          String
  mentor_level       BigInt?             @default(0)
  rating_changed     DateTime?           @default(now()) @db.Timestamptz(6)
  sop_course         Boolean             @default(false)
  controllerSessions ControllerSession[]
  events             Event[]
  onlineControllers  OnlineControllers[]
  positionRequests   PositionRequest[]
  StaffRoles         StaffRole[]
  stats              Stats?

  @@map("roster")
}

model StaffRole {
  cid    Int
  role   String @db.VarChar(10)
  roster Roster @relation(fields: [cid], references: [cid], onDelete: NoAction, onUpdate: NoAction, map: "staff_roles_roster_cid_fk")

  @@id([cid, role], map: "staff_roles_pk")
  @@map("staff_roles")
}

model Stats {
  cid         Int    @id
  month_one   Float  @default(0.0)
  month_two   Float  @default(0.0)
  month_three Float  @default(0.0)
  ytd         Float?
  all_time    Float?
  delivery    Float?
  ground      Float?
  tower       Float?
  tracon      Float?
  enroute     Float?
  roster      Roster @relation(fields: [cid], references: [cid], onDelete: Cascade, onUpdate: NoAction)

  @@map("stats")
}

model User {
  id                                              Int            @id
  firstName                                       String         @map("first_name")
  lastName                                        String         @map("last_name")
  email                                           String         @unique
  division                                        String
  facility                                        String?
  rating                                          Int
  roles                                           String
  rostered                                        Boolean?
  visitRequests                                   VisitRequest[]
  visit_requests_visit_requests_action_cidTousers VisitRequest[] @relation("visit_requests_action_cidTousers")
  sessions                                        WebSession[]

  @@map("users")
}

model VisitRequest {
  id                                     Int       @id @default(autoincrement())
  cid                                    Int
  reason                                 String
  date_requested                         DateTime? @db.Date
  reviewed                               Boolean?  @default(false)
  action_message                         String?   @db.VarChar(150)
  action_cid                             Int?
  action_date                            DateTime? @db.Date
  users                                  User      @relation(fields: [cid], references: [id], onDelete: Cascade, map: "visit_requests_users_cid_fk")
  users_visit_requests_action_cidTousers User?     @relation("visit_requests_action_cidTousers", fields: [action_cid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "visit_requests_users_id_fk")

  @@map("visit_requests")
}

model WebSession {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("web_sessions")
}
