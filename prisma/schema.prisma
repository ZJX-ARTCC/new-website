generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bookings {
  id            BigInt   @id @default(autoincrement())
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  position      String
  booking_start DateTime @db.Timestamptz(6)
  booking_end   DateTime @db.Timestamptz(6)
  cid           BigInt
  roster        roster   @relation(fields: [cid], references: [cid], onDelete: NoAction, onUpdate: NoAction)
}

model events {
  id                BigInt              @id @default(autoincrement())
  last_modified     DateTime            @default(now()) @db.Timestamptz(6)
  created_by        BigInt
  name              String
  description       String
  event_start       DateTime            @db.Timestamptz(6)
  event_end         DateTime            @db.Timestamptz(6)
  host              String
  hidden            Boolean             @default(true)
  banner            String
  positions         Json?
  roster            roster              @relation(fields: [created_by], references: [cid], onDelete: NoAction, onUpdate: NoAction)
  position_requests position_requests[]
}

model notams {
  id         BigInt   @id
  created_at DateTime @db.Timestamptz(6)
  author     BigInt
  body       String
  roster     roster   @relation(fields: [author], references: [cid], onDelete: NoAction, onUpdate: NoAction)
}

model roster {
  cid                BigInt               @id
  email              String
  home_facility      String
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  rating             BigInt
  del_certs          Float
  gnd_certs          Float
  twr_certs          Float
  app_certs          Float
  ctr_cert           BigInt
  initials           String
  first_name         String
  last_name          String
  staff_roles        String
  mentor_level       BigInt?              @default(0)
  rating_changed     DateTime?            @default(now()) @db.Timestamptz(6)
  sop_course         Boolean              @default(false)
  bookings           bookings[]
  events             events[]
  notams             notams[]
  online_controllers online_controllers[]
  position_requests  position_requests[]
  sessions           sessions[]
  stats              stats?
  visit_requests     visit_requests[]
}

model sessions {
  id          BigInt    @id
  cid         BigInt
  callsign    String?   @db.VarChar(255)
  frequency   String?   @db.VarChar(255)
  logon_time  DateTime? @db.Timestamptz(6)
  last_update DateTime? @db.Timestamptz(6)
  duration    Int?
  roster      roster    @relation(fields: [cid], references: [cid], onDelete: NoAction, onUpdate: NoAction)
}

model stats {
  cid         BigInt @id
  month_one   Float  @default(0.0)
  month_two   Float  @default(0.0)
  month_three Float  @default(0.0)
  roster      roster @relation(fields: [cid], references: [cid], onDelete: Cascade, onUpdate: NoAction)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model online_controllers {
  id          BigInt    @id
  cid         BigInt?
  callsign    String?   @db.VarChar(255)
  frequency   String?   @db.VarChar(255)
  logon_time  DateTime? @db.Timestamptz(6)
  last_update DateTime? @db.Timestamptz(6)
  duration    Int?
  roster      roster?   @relation(fields: [cid], references: [cid], onDelete: Cascade, map: "cid")
}

model position_requests {
  cid        BigInt
  event_id   BigInt?
  position   String
  request_id Int     @id(map: "request_id") @default(autoincrement())
  roster     roster  @relation(fields: [cid], references: [cid], onDelete: Cascade, map: "cid")
  events     events? @relation(fields: [event_id], references: [id], onDelete: Cascade, map: "event_id")
}

model visit_requests {
  id     BigInt @id
  cid    BigInt
  reason String
  roster roster @relation(fields: [cid], references: [cid], onDelete: Cascade, map: "visit_requests_roster_cid_fk")
}
model User {
  id            Int      @id
  firstName     String   @map("first_name")
  lastName      String   @map("last_name")
  email         String   @unique
  division      String
  facility      String
  rating        Int

  sessions      Session[]

  @@map("user_test")
}

model Session {
  id           String @id
  userId       Int
  expiresAt    DateTime

  user         User  @relation(references: [id], fields: [userId], onDelete: Cascade)
  @@map("sessions_test")
}

model AAccount {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  User              SUser     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Account")

  @@id([provider, providerAccountId])
}

model OLD_Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  User         SUser     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("Session")
}

model SUser {
  id            String    @id
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  cid           String
  rostered      Boolean?
  Account       AAccount[]
  Session       OLD_Session[]

  @@map("User")
}
