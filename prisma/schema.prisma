generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ArtccStats {
  id        Int      @id
  timestamp DateTime
  mtd       Float?
  ytd       Float?
  all_time  Float?

  @@map("artcc_stats")
}

model ControllerSession {
  id        String    @id @default(uuid())
  cid       Int
  callsign  String?   @db.VarChar(255)
  frequency String?   @db.VarChar(255)
  start     DateTime? @db.Timestamptz(6)
  end       DateTime? @db.Timestamptz(6)
  active    Boolean
  roster    Roster    @relation(fields: [cid], references: [cid], onDelete: NoAction, onUpdate: NoAction)

  @@map("controller_sessions")
}

model Event {
  id               Int               @id @default(autoincrement())
  lastModified     DateTime          @default(now()) @map("last_modified") @db.Timestamptz(6)
  createdBy        Int               @map("created_by")
  name             String
  description      String
  start            DateTime          @db.Timestamptz(6)
  end              DateTime          @db.Timestamptz(6)
  host             String
  hidden           Boolean           @default(true)
  banner           String
  positions        Json?
  roster           Roster            @relation(fields: [createdBy], references: [cid], onDelete: NoAction, onUpdate: NoAction)
  positionRequests PositionRequest[]
  EventPosition    EventPosition[]

  @@map("events")
}

model EventPosition {
  cid      Int
  eventId  Int
  position String
  roster   Roster @relation(fields: [cid], references: [cid], onDelete: Cascade)
  event    Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([cid, eventId], map: "event_positions_pk")
  @@map("event_positions")
}

model PositionRequest {
  cid       Int
  eventId   Int    @map("event_id")
  position  String
  requestId Int    @id(map: "request_id") @default(autoincrement()) @map("request_id")
  roster    Roster @relation(fields: [cid], references: [cid], onDelete: Cascade, map: "cid")
  event     Event  @relation(fields: [eventId], references: [id], onDelete: Cascade, map: "event_id")

  @@map("position_requests")
}

model Roster {
  cid                Int                 @id
  email              String
  homeFacility       String              @map("home_facility")
  createdAt          DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  rating             Int
  delCerts           Int                 @map("del_certs")
  gndCerts           Int                 @map("gnd_certs")
  twrCerts           Int                 @map("twr_certs")
  appCerts           Int                 @map("app_certs")
  ctrCert            Int                 @map("ctr_cert")
  initials           String
  firstName          String              @map("first_name")
  lastName           String              @map("last_name")
  mentorLevel        BigInt?             @default(0) @map("mentor_level")
  ratingChanged      DateTime?           @default(now()) @map("rating_changed") @db.Timestamptz(6)
  sopCourse          Boolean             @default(false) @map("sop_course")
  controllerSessions ControllerSession[]
  events             Event[]
  positionRequests   PositionRequest[]
  StaffRoles         StaffRole[]
  stats              Stats?

  training_sessions_training_sessions_controller_cidToroster TrainingSession[] @relation("training_sessions_controller_cidToroster")
  training_sessions_training_sessions_instructor_cidToroster TrainingSession[] @relation("training_sessions_instructor_cidToroster")
  EventPosition                                              EventPosition[]

  @@map("roster")
}

model StaffRole {
  cid    Int
  role   String @db.VarChar(10)
  roster Roster @relation(fields: [cid], references: [cid], onDelete: NoAction, onUpdate: NoAction, map: "staff_roles_roster_cid_fk")

  @@id([cid, role], map: "staff_roles_pk")
  @@map("staff_roles")
}

model Stats {
  cid         Int    @id
  month_one   Float  @default(0.0)
  month_two   Float  @default(0.0)
  month_three Float  @default(0.0)
  ytd         Float?
  all_time    Float?
  delivery    Float?
  ground      Float?
  tower       Float?
  tracon      Float?
  enroute     Float?
  roster      Roster @relation(fields: [cid], references: [cid], onDelete: Cascade, onUpdate: NoAction)

  @@map("stats")
}

model User {
  id                                              Int            @id
  firstName                                       String         @map("first_name")
  lastName                                        String         @map("last_name")
  email                                           String         @unique
  division                                        String
  facility                                        String?
  rating                                          Int
  roles                                           String
  rostered                                        Boolean?
  visitRequests                                   VisitRequest[]
  visit_requests_visit_requests_action_cidTousers VisitRequest[] @relation("visit_requests_action_cidTousers")
  sessions                                        WebSession[]

  @@map("users")
}

model VisitRequest {
  id                                     Int       @id @default(autoincrement())
  cid                                    Int
  reason                                 String
  date_requested                         DateTime? @db.Date
  reviewed                               Boolean?  @default(false)
  action_message                         String?   @db.VarChar(150)
  action_cid                             Int?
  action_date                            DateTime? @db.Date
  accepted                               Boolean
  users                                  User      @relation(fields: [cid], references: [id], onDelete: Cascade, map: "visit_requests_users_cid_fk")
  users_visit_requests_action_cidTousers User?     @relation("visit_requests_action_cidTousers", fields: [action_cid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "visit_requests_users_id_fk")

  @@map("visit_requests")
}

model WebSession {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("web_sessions")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model TrainingSession {
  session_id                                      Int     @id(map: "training_sessions_pk")
  controller_cid                                  Int
  instructor_cid                                  Int
  duration                                        Int
  number_of_movements                             Int?    @default(0)
  comments                                        String? @db.VarChar(750)
  progress_rating                                 Int?
  position                                        String? @db.VarChar(20)
  session_type                                    String  @db.VarChar(20)
  roster_training_sessions_controller_cidToroster Roster  @relation("training_sessions_controller_cidToroster", fields: [controller_cid], references: [cid], onDelete: NoAction, onUpdate: NoAction, map: "training_sessions___fk_controller")
  roster_training_sessions_instructor_cidToroster Roster  @relation("training_sessions_instructor_cidToroster", fields: [instructor_cid], references: [cid], onDelete: NoAction, onUpdate: NoAction, map: "training_sessions___fk_instructor")

  @@map("training_sessions")
}
